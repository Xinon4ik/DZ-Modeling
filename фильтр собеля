import numpy as np
from PIL import Image
import matplotlib.pyplot as plt

def sobel_operator(pixel_values, x_coord, y_coord, image_width, image_height):
    if x_coord == 0 or y_coord == 0 or x_coord == image_width-1 or y_coord == image_height-1:
        return (0, 0, 0)

    Gx_matrix = np.array([
        [-1, 0, 1],
        [-2, 0, 2],
        [-1, 0, 1]
    ])

    Gy_matrix = np.array([
        [-1, -2, -1],
        [0, 0, 0],
        [1, 2, 1]
    ])

    sums = [0, 0, 0]
    for i in range(3):
        neighborhood = np.array([
            [pixel_values[(y_coord-1)*image_width + x_coord-1][i], pixel_values[(y_coord-1)*image_width + x_coord][i], pixel_values[(y_coord-1)*image_width + x_coord+1][i]],
            [pixel_values[y_coord*image_width + x_coord-1][i], pixel_values[y_coord*image_width + x_coord][i], pixel_values[y_coord*image_width + x_coord+1][i]],
            [pixel_values[(y_coord+1)*image_width + x_coord-1][i], pixel_values[(y_coord+1)*image_width + x_coord][i], pixel_values[(y_coord+1)*image_width + x_coord+1][i]]
        ])
        sumx = np.sum(neighborhood * Gx_matrix)
        sumy = np.sum(neighborhood * Gy_matrix)
        sums[i] = int(np.sqrt(sumx**2 + sumy**2))

    return tuple(sums)

input_image = Image.open("img.png")
input_pixel_values = list(input_image.getdata())

image_width, image_height = input_image.size
output_image = Image.new('RGB', (image_width, image_height))

for x_coord in range(image_width):
    for y_coord in range(image_height):
        new_color = sobel_operator(input_pixel_values, x_coord, y_coord, image_width, image_height)
        output_image.putpixel((x_coord, y_coord), new_color)

output_image.save("new_img.png")

plt.imshow(input_image)
plt.show()

plt.imshow(output_image)
plt.show()
